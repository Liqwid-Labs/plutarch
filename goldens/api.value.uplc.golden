singleton (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i3 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i3 (bData i2) (iData i1)) #736f6d65746f6b656e 1)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
singletonData (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> force (force ifThenElse (equalsData i1 (iData 0)) (delay i6) (delay (i4 i3 (mapData (i4 i2 i1)))))) (bData #c0) (bData #736f6d65746f6b656e) (iData 1)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
valueOf.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)))
valueOf.applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> i11 (bData i14) (mapData i1)) ((\i0 -> i11 (bData i15) (iData i1)) 1)) i13 i14) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c0) #736f6d65746f6b656e))
valueOf.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> \i0 -> i12 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i12 (bData i2) (iData i1)) #736f6d65746f6b656e 1)) #c7 #746f6b656e) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i8 i1 (delay i5) (delay (force (i9 (equalsData (i10 (i12 i1)) i6) (delay (i4 (i11 (i12 i1)))) (delay (i2 (i13 i1)))))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
valueOf.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) ((\i0 -> \i0 -> (\i0 -> i6 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i7 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i13 i14 (i15 #736f6d65746f6b656e 1)) (i13 i14 (i15 i19 1))) #c7 i19) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i7 (\i0 -> \i0 -> force (i14 i1 (delay i5) (delay (force (i12 (equalsData (i13 (i15 i1)) i6) (delay (i4 (i11 (i15 i1)))) (delay (i2 (i16 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) (i17 #c2 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) (i17 #c2 (i18 i22 1))) (i17 #c3 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) (i17 #c2 (i18 i22 1))) (i17 #c3 (i18 i22 1))) (i17 #c4 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) (i17 #c2 (i18 i22 1))) (i17 #c3 (i18 i22 1))) (i17 #c4 (i18 i22 1))) (i17 #c5 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i22 1))) (i17 #c1 (i18 i22 1))) (i17 #c2 (i18 i22 1))) (i17 #c3 (i18 i22 1))) (i17 #c4 (i18 i22 1))) (i17 #c5 (i18 i22 1))) (i17 #c6 (i18 i22 1))) #c7 i22) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
valueOf.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) (i17 #cb (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) (i17 #cb (i18 i23 1))) (i17 #cc (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) (i17 #cb (i18 i23 1))) (i17 #cc (i18 i23 1))) (i17 #cd (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) (i17 #cb (i18 i23 1))) (i17 #cc (i18 i23 1))) (i17 #cd (i18 i23 1))) (i17 #ce (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
valueOf.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> i4 i2 0 (\i0 -> i5 i2 0 unIData (unMapData i1)) i3) (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i3 addInteger (i17 i16 (i18 #736f6d65746f6b656e 1)) (i17 i16 (i18 i23 1))) (i17 #c1 (i18 i23 1))) (i17 #c2 (i18 i23 1))) (i17 #c3 (i18 i23 1))) (i17 #c4 (i18 i23 1))) (i17 #c5 (i18 i23 1))) (i17 #c6 (i18 i23 1))) (i17 i22 (i18 i23 1))) (i17 #c8 (i18 i23 1))) (i17 #c9 (i18 i23 1))) (i17 #ca (i18 i23 1))) (i17 #cb (i18 i23 1))) (i17 #cc (i18 i23 1))) (i17 #cd (i18 i23 1))) (i17 #ce (i18 i23 1))) (i17 #cf (i18 i23 1))) i22 i23) (\i0 -> i2 (bData i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i10 (\i0 -> \i0 -> force (i17 i1 (delay i5) (delay (force (i15 (equalsData (i16 (i18 i1)) i6) (delay (i4 (i14 (i18 i1)))) (delay (i2 (i19 i1)))))))) i1)) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #c7) #746f6b656e))
unionWith.const (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (i7 (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i11 i12 (i13 i17 1)) (i11 i12 (i13 i17 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.(+).itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i11 i1 (delay (i9 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i12 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i16 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i12 i6 (i8 (\i0 -> \i0 -> i1) i3 (i16 i4) i5))) (delay (i12 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i16 i4))))))))) (i12 i2)) (i11 i4)) (i12 i1)))))) (\i0 -> \i0 -> force (i9 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i10 i2) (i11 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force mkCons)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)))
unionWith.(+).applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i11 i12 (i13 i17 1)) (i11 i12 (i13 i17 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.tokens (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i11 i12 (i13 #736f6d65746f6b656e 1)) (i11 i12 (i13 #6f74686572746f6b656e 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
unionWith.symbols (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i11 #c0 (i12 i16 1)) (i11 #c7 (i12 i16 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i16 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i19 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i19 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i19 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (i7 (unIData i2) (unIData i1))) i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i11 #c0 (i12 i16 1)) (i11 #c7 (i12 i16 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i16 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i19 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i19 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i19 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i15 i14 (i16 i20 1)) (i15 i14 (i16 #746f6b656e 1))) (i15 #c7 (i16 i20 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c2 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c2 (i17 i15 1))) (i16 #c3 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c2 (i17 i15 1))) (i16 #c3 (i17 i15 1))) (i16 #c4 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c2 (i17 i15 1))) (i16 #c3 (i17 i15 1))) (i16 #c4 (i17 i15 1))) (i16 #c5 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i17 i21 1)) (i16 i14 (i17 i15 1))) (i16 #c1 (i17 i15 1))) (i16 #c2 (i17 i15 1))) (i16 #c3 (i17 i15 1))) (i16 #c4 (i17 i15 1))) (i16 #c5 (i17 i15 1))) (i16 #c6 (i17 i15 1))) (i16 #c7 (i17 i21 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 #cb (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 #cb (i18 i15 1))) (i16 #cc (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 #cb (i18 i15 1))) (i16 #cc (i18 i15 1))) (i16 #cd (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 #cb (i18 i15 1))) (i16 #cc (i18 i15 1))) (i16 #cd (i18 i15 1))) (i16 #ce (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWith.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> i2) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i16 i14 (i18 i22 1)) (i16 i14 (i18 i15 1))) (i16 #c1 (i18 i15 1))) (i16 #c2 (i18 i15 1))) (i16 #c3 (i18 i15 1))) (i16 #c4 (i18 i15 1))) (i16 #c5 (i18 i15 1))) (i16 #c6 (i18 i15 1))) (i16 i17 (i18 i15 1))) (i16 #c8 (i18 i15 1))) (i16 #c9 (i18 i15 1))) (i16 #ca (i18 i15 1))) (i16 #cb (i18 i15 1))) (i16 #cc (i18 i15 1))) (i16 #cd (i18 i15 1))) (i16 #ce (i18 i15 1))) (i16 #cf (i18 i15 1))) (i16 i17 (i18 i22 1))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c0) #746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
unionWithData const.itself (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 i5 i2 i1) i2 i1) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i11 i1 (delay (i9 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i12 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i16 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i12 i6 (i8 (\i0 -> \i0 -> i1) i3 (i16 i4) i5))) (delay (i12 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i16 i4))))))))) (i12 i2)) (i11 i4)) (i12 i1)))))) (\i0 -> \i0 -> force (i9 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i10 i2) (i11 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force mkCons)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)))
unionWithData const.applied (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 i5 i2 i1) i2 i1) (\i0 -> \i0 -> i2) (i11 i12 (i13 i17 1)) (i11 i12 (i13 i17 1))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
inv (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> (\i0 -> i4 (\i0 -> mapData (i2 (unMapData i1)))) (\i0 -> i4 (\i0 -> iData (i4 (unIData i1))) i1) i1) (\i0 -> subtractInteger 0 i1) ((\i0 -> \i0 -> i10 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i10 (bData i2) (iData i1)) #736f6d65746f6b656e 1))) (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (i6 i1 (delay i13) (delay (i12 (mkPairData (i7 (i9 i1)) (i4 (i8 (i9 i1)))) (i2 (i10 i1)))))) i1)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force (force fstPair))) (force (force sndPair))) (force headList)) (force tailList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
equality.itself (program 1.0.0 (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)))
equality.triviallyTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 i2 (i3 i7 1)) (i1 i2 (i3 i7 1))) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
equality.triviallyFalse (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 i2 (i3 #736f6d65746f6b656e 1)) (i1 i2 (i3 #6f74686572746f6b656e 1))) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
equality.swappedTokensTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i15 i16 (i17 i21 1)) (i15 i16 (i17 i14 1))) (i1 addInteger (i15 i16 (i17 i14 1)) (i15 i16 (i17 i21 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #6f74686572746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
equality.swappedSymbolsTrue (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i15 i16 (i17 i21 1)) (i15 i14 (i17 i21 1))) (i1 addInteger (i15 i14 (i17 i21 1)) (i15 i16 (i17 i21 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #c7) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
equality.growing.1 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 i2 (i3 i7 1)) (i1 i2 (i3 i7 1))) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
equality.growing.2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i15 i16 (i17 i14 1)) (i15 i16 (i17 i21 1))) (i1 addInteger (i15 i16 (i17 i14 1)) (i15 i16 (i17 i21 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i18 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i21 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i21 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i21 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i16 i15 (i18 i14 1)) (i16 i15 (i18 i22 1))) (i16 i17 (i18 i22 1))) (i1 addInteger (i1 addInteger (i16 i15 (i18 i14 1)) (i16 i15 (i18 i22 1))) (i16 i17 (i18 i22 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i19 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i22 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i22 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i22 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c1) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i17 i15 (i19 i14 1)) (i17 i15 (i19 i23 1))) (i17 i16 (i19 i23 1))) (i17 i18 (i19 i23 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i17 i15 (i19 i14 1)) (i17 i15 (i19 i23 1))) (i17 i16 (i19 i23 1))) (i17 i18 (i19 i23 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i20 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i23 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i23 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i23 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c2) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.5 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i18 i15 (i20 i14 1)) (i18 i15 (i20 i24 1))) (i18 i16 (i20 i24 1))) (i18 i17 (i20 i24 1))) (i18 i19 (i20 i24 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i18 i15 (i20 i14 1)) (i18 i15 (i20 i24 1))) (i18 i16 (i20 i24 1))) (i18 i17 (i20 i24 1))) (i18 i19 (i20 i24 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i21 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i24 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i24 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i24 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c3) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.6 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i15 (i21 i14 1)) (i19 i15 (i21 i25 1))) (i19 i16 (i21 i25 1))) (i19 i17 (i21 i25 1))) (i19 i18 (i21 i25 1))) (i19 i20 (i21 i25 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i19 i15 (i21 i14 1)) (i19 i15 (i21 i25 1))) (i19 i16 (i21 i25 1))) (i19 i17 (i21 i25 1))) (i19 i18 (i21 i25 1))) (i19 i20 (i21 i25 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i22 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i25 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i25 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i25 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c4) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.7 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i20 i15 (i22 i14 1)) (i20 i15 (i22 i26 1))) (i20 i16 (i22 i26 1))) (i20 i17 (i22 i26 1))) (i20 i18 (i22 i26 1))) (i20 i19 (i22 i26 1))) (i20 i21 (i22 i26 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i20 i15 (i22 i14 1)) (i20 i15 (i22 i26 1))) (i20 i16 (i22 i26 1))) (i20 i17 (i22 i26 1))) (i20 i18 (i22 i26 1))) (i20 i19 (i22 i26 1))) (i20 i21 (i22 i26 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i23 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i26 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i26 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i26 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c5) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.8 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i21 i15 (i23 i14 1)) (i21 i15 (i23 i27 1))) (i21 i16 (i23 i27 1))) (i21 i17 (i23 i27 1))) (i21 i18 (i23 i27 1))) (i21 i19 (i23 i27 1))) (i21 i20 (i23 i27 1))) (i21 i22 (i23 i27 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i21 i15 (i23 i14 1)) (i21 i15 (i23 i27 1))) (i21 i16 (i23 i27 1))) (i21 i17 (i23 i27 1))) (i21 i18 (i23 i27 1))) (i21 i19 (i23 i27 1))) (i21 i20 (i23 i27 1))) (i21 i22 (i23 i27 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i24 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i27 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i27 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i27 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c6) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.9 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i22 i15 (i24 i14 1)) (i22 i15 (i24 i28 1))) (i22 i16 (i24 i28 1))) (i22 i17 (i24 i28 1))) (i22 i18 (i24 i28 1))) (i22 i19 (i24 i28 1))) (i22 i20 (i24 i28 1))) (i22 i21 (i24 i28 1))) (i22 i23 (i24 i28 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i22 i15 (i24 i14 1)) (i22 i15 (i24 i28 1))) (i22 i16 (i24 i28 1))) (i22 i17 (i24 i28 1))) (i22 i18 (i24 i28 1))) (i22 i19 (i24 i28 1))) (i22 i20 (i24 i28 1))) (i22 i21 (i24 i28 1))) (i22 i23 (i24 i28 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i25 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i28 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i28 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i28 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c7) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.10 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i23 i15 (i25 i14 1)) (i23 i15 (i25 i29 1))) (i23 i16 (i25 i29 1))) (i23 i17 (i25 i29 1))) (i23 i18 (i25 i29 1))) (i23 i19 (i25 i29 1))) (i23 i20 (i25 i29 1))) (i23 i21 (i25 i29 1))) (i23 i22 (i25 i29 1))) (i23 i24 (i25 i29 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i23 i15 (i25 i14 1)) (i23 i15 (i25 i29 1))) (i23 i16 (i25 i29 1))) (i23 i17 (i25 i29 1))) (i23 i18 (i25 i29 1))) (i23 i19 (i25 i29 1))) (i23 i20 (i25 i29 1))) (i23 i21 (i25 i29 1))) (i23 i22 (i25 i29 1))) (i23 i24 (i25 i29 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i26 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i29 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i29 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i29 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c8) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.11 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i24 i15 (i26 i14 1)) (i24 i15 (i26 i30 1))) (i24 i16 (i26 i30 1))) (i24 i17 (i26 i30 1))) (i24 i18 (i26 i30 1))) (i24 i19 (i26 i30 1))) (i24 i20 (i26 i30 1))) (i24 i21 (i26 i30 1))) (i24 i22 (i26 i30 1))) (i24 i23 (i26 i30 1))) (i24 i25 (i26 i30 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i24 i15 (i26 i14 1)) (i24 i15 (i26 i30 1))) (i24 i16 (i26 i30 1))) (i24 i17 (i26 i30 1))) (i24 i18 (i26 i30 1))) (i24 i19 (i26 i30 1))) (i24 i20 (i26 i30 1))) (i24 i21 (i26 i30 1))) (i24 i22 (i26 i30 1))) (i24 i23 (i26 i30 1))) (i24 i25 (i26 i30 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i27 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i30 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i30 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i30 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c9) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.12 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i25 i15 (i27 i14 1)) (i25 i15 (i27 i31 1))) (i25 i16 (i27 i31 1))) (i25 i17 (i27 i31 1))) (i25 i18 (i27 i31 1))) (i25 i19 (i27 i31 1))) (i25 i20 (i27 i31 1))) (i25 i21 (i27 i31 1))) (i25 i22 (i27 i31 1))) (i25 i23 (i27 i31 1))) (i25 i24 (i27 i31 1))) (i25 i26 (i27 i31 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i25 i15 (i27 i14 1)) (i25 i15 (i27 i31 1))) (i25 i16 (i27 i31 1))) (i25 i17 (i27 i31 1))) (i25 i18 (i27 i31 1))) (i25 i19 (i27 i31 1))) (i25 i20 (i27 i31 1))) (i25 i21 (i27 i31 1))) (i25 i22 (i27 i31 1))) (i25 i23 (i27 i31 1))) (i25 i24 (i27 i31 1))) (i25 i26 (i27 i31 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i28 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i31 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i31 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i31 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #ca) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.13 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i26 i15 (i28 i14 1)) (i26 i15 (i28 i32 1))) (i26 i16 (i28 i32 1))) (i26 i17 (i28 i32 1))) (i26 i18 (i28 i32 1))) (i26 i19 (i28 i32 1))) (i26 i20 (i28 i32 1))) (i26 i21 (i28 i32 1))) (i26 i22 (i28 i32 1))) (i26 i23 (i28 i32 1))) (i26 i24 (i28 i32 1))) (i26 i25 (i28 i32 1))) (i26 i27 (i28 i32 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i26 i15 (i28 i14 1)) (i26 i15 (i28 i32 1))) (i26 i16 (i28 i32 1))) (i26 i17 (i28 i32 1))) (i26 i18 (i28 i32 1))) (i26 i19 (i28 i32 1))) (i26 i20 (i28 i32 1))) (i26 i21 (i28 i32 1))) (i26 i22 (i28 i32 1))) (i26 i23 (i28 i32 1))) (i26 i24 (i28 i32 1))) (i26 i25 (i28 i32 1))) (i26 i27 (i28 i32 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i29 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i32 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i32 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i32 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #cb) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.14 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i27 i15 (i29 i14 1)) (i27 i15 (i29 i33 1))) (i27 i16 (i29 i33 1))) (i27 i17 (i29 i33 1))) (i27 i18 (i29 i33 1))) (i27 i19 (i29 i33 1))) (i27 i20 (i29 i33 1))) (i27 i21 (i29 i33 1))) (i27 i22 (i29 i33 1))) (i27 i23 (i29 i33 1))) (i27 i24 (i29 i33 1))) (i27 i25 (i29 i33 1))) (i27 i26 (i29 i33 1))) (i27 i28 (i29 i33 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i27 i15 (i29 i14 1)) (i27 i15 (i29 i33 1))) (i27 i16 (i29 i33 1))) (i27 i17 (i29 i33 1))) (i27 i18 (i29 i33 1))) (i27 i19 (i29 i33 1))) (i27 i20 (i29 i33 1))) (i27 i21 (i29 i33 1))) (i27 i22 (i29 i33 1))) (i27 i23 (i29 i33 1))) (i27 i24 (i29 i33 1))) (i27 i25 (i29 i33 1))) (i27 i26 (i29 i33 1))) (i27 i28 (i29 i33 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i30 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i33 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i33 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i33 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #cc) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.15 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i28 i15 (i30 i14 1)) (i28 i15 (i30 i34 1))) (i28 i16 (i30 i34 1))) (i28 i17 (i30 i34 1))) (i28 i18 (i30 i34 1))) (i28 i19 (i30 i34 1))) (i28 i20 (i30 i34 1))) (i28 i21 (i30 i34 1))) (i28 i22 (i30 i34 1))) (i28 i23 (i30 i34 1))) (i28 i24 (i30 i34 1))) (i28 i25 (i30 i34 1))) (i28 i26 (i30 i34 1))) (i28 i27 (i30 i34 1))) (i28 i29 (i30 i34 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i28 i15 (i30 i14 1)) (i28 i15 (i30 i34 1))) (i28 i16 (i30 i34 1))) (i28 i17 (i30 i34 1))) (i28 i18 (i30 i34 1))) (i28 i19 (i30 i34 1))) (i28 i20 (i30 i34 1))) (i28 i21 (i30 i34 1))) (i28 i22 (i30 i34 1))) (i28 i23 (i30 i34 1))) (i28 i24 (i30 i34 1))) (i28 i25 (i30 i34 1))) (i28 i26 (i30 i34 1))) (i28 i27 (i30 i34 1))) (i28 i29 (i30 i34 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i31 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i34 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i34 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i34 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #cd) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.16 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i29 i15 (i31 i14 1)) (i29 i15 (i31 i35 1))) (i29 i16 (i31 i35 1))) (i29 i17 (i31 i35 1))) (i29 i18 (i31 i35 1))) (i29 i19 (i31 i35 1))) (i29 i20 (i31 i35 1))) (i29 i21 (i31 i35 1))) (i29 i22 (i31 i35 1))) (i29 i23 (i31 i35 1))) (i29 i24 (i31 i35 1))) (i29 i25 (i31 i35 1))) (i29 i26 (i31 i35 1))) (i29 i27 (i31 i35 1))) (i29 i28 (i31 i35 1))) (i29 i30 (i31 i35 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i29 i15 (i31 i14 1)) (i29 i15 (i31 i35 1))) (i29 i16 (i31 i35 1))) (i29 i17 (i31 i35 1))) (i29 i18 (i31 i35 1))) (i29 i19 (i31 i35 1))) (i29 i20 (i31 i35 1))) (i29 i21 (i31 i35 1))) (i29 i22 (i31 i35 1))) (i29 i23 (i31 i35 1))) (i29 i24 (i31 i35 1))) (i29 i25 (i31 i35 1))) (i29 i26 (i31 i35 1))) (i29 i27 (i31 i35 1))) (i29 i28 (i31 i35 1))) (i29 i30 (i31 i35 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i32 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i35 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i35 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i35 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) #cd) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #ce) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
equality.growing.17 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> equalsData (mapData i2) (mapData i1)) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i30 i15 (i32 i14 1)) (i30 i15 (i32 i36 1))) (i30 i16 (i32 i36 1))) (i30 i17 (i32 i36 1))) (i30 i18 (i32 i36 1))) (i30 i19 (i32 i36 1))) (i30 i20 (i32 i36 1))) (i30 i21 (i32 i36 1))) (i30 i22 (i32 i36 1))) (i30 i23 (i32 i36 1))) (i30 i24 (i32 i36 1))) (i30 i25 (i32 i36 1))) (i30 i26 (i32 i36 1))) (i30 i27 (i32 i36 1))) (i30 i28 (i32 i36 1))) (i30 i29 (i32 i36 1))) (i30 i31 (i32 i36 1))) (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i1 addInteger (i30 i15 (i32 i14 1)) (i30 i15 (i32 i36 1))) (i30 i16 (i32 i36 1))) (i30 i17 (i32 i36 1))) (i30 i18 (i32 i36 1))) (i30 i19 (i32 i36 1))) (i30 i20 (i32 i36 1))) (i30 i21 (i32 i36 1))) (i30 i22 (i32 i36 1))) (i30 i23 (i32 i36 1))) (i30 i24 (i32 i36 1))) (i30 i25 (i32 i36 1))) (i30 i26 (i32 i36 1))) (i30 i27 (i32 i36 1))) (i30 i28 (i32 i36 1))) (i30 i29 (i32 i36 1))) (i30 i31 (i32 i36 1)))) (\i0 -> \i0 -> \i0 -> i4 (\i0 -> \i0 -> i7 i5 i2 i1) i2 i1)) (\i0 -> i3 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1))))) (\i0 -> i2 (\i0 -> \i0 -> iData (i3 (unIData i2) (unIData i1))))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i33 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i36 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i36 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i36 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) #736f6d65746f6b656e) #c0) #c1) #c2) #c3) #c4) #c5) #c6) #c7) #c8) #c9) #ca) #cb) #cc) #cd) #ce) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #cf) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #746f6b656e))
normalize.identity (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i11 ((\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i13 i1))) i1) (\i0 -> (\i0 -> \i0 -> i5 (\i0 -> i3 (unIData (i14 i1))) i1) (\i0 -> lessThanInteger 0 i1) i1) i1) (delay i1) (delay (force (force trace "Negative amount in Value" (delay error)))))) ((\i0 -> (\i0 -> i6 (\i0 -> i2 (unMapData i1) (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i3) (mapData i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> (\i0 -> force (i13 (force nullList i1) (delay (\i0 -> \i0 -> force i1)) (delay (\i0 -> \i0 -> i2 i3)))) (i6 (\i0 -> force (i13 (equalsData i1 (iData 0)) (delay (\i0 -> \i0 -> force i1)) (delay (\i0 -> \i0 -> i2 i3)))) i1)) i1) ((\i0 -> \i0 -> (\i0 -> i8 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i9 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i15 #c0 (i16 i20 1)) (i15 #c7 (i16 i20 1))))) (\i0 -> i7 (\i0 -> \i0 -> force (i14 i1 (delay True) (delay (force (i4 (i3 (i15 i1)) (delay (i2 (i16 i1)))))))))) (\i0 -> \i0 -> i10 i2 i1 i3)) (delay False)) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i12 i1 (delay i19) (delay ((\i0 -> i5 (i10 (i14 i2)) (\i0 -> i20 (mkPairData (i13 (i15 i3)) i1) i2) (delay i1)) (i2 (i14 i1)))))) i1)) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i16 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i19 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i19 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i19 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
normalize.empty (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i3 (\i0 -> i2 (unMapData i1) (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i3) (mapData i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> (\i0 -> force (i10 (force nullList i1) (delay (\i0 -> \i0 -> force i1)) (delay (\i0 -> \i0 -> i2 i3)))) (i3 (\i0 -> force (i10 (equalsData i1 (iData 0)) (delay (\i0 -> \i0 -> force i1)) (delay (\i0 -> \i0 -> i2 i3)))) i1)) i1) ((\i0 -> \i0 -> (\i0 -> i5 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i6 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i12 i13 (i14 i18 1)) (i12 i13 (i14 i18 1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> force (i12 i1 (delay i20) (delay ((\i0 -> i5 (i10 (i14 i2)) (\i0 -> i21 (mkPairData (i13 (i15 i3)) i1) i2) (delay i1)) (i2 (i14 i1)))))) i1)) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
assertSorted.succeeds (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i13 ((\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i15 i1))) i1) (\i0 -> force (i4 (force nullList (i6 i1)) (delay ((\i0 -> \i0 -> i5 (\i0 -> i3 (unIData (i16 i1))) i1) (\i0 -> equalsInteger i1 0) i1)))) i1) (delay (force (i6 "Abnormal Value" (delay error)))) (delay (i5 i1)))) ((\i0 -> \i0 -> (\i0 -> i10 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i11 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 #c0 (i18 i22 1)) (i17 #c7 (i18 i22 1)))) (\i0 -> i9 (\i0 -> \i0 -> force (i16 i1 (delay False) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> i11 i1 i2)) (delay True)) (\i0 -> i6 (\i0 -> \i0 -> force (i13 i1 (delay (\i0 -> i4)) (delay ((\i0 -> \i0 -> force (i13 (i1 i2) (delay (force (i6 i7 (delay error)))) (delay (i4 (i17 i3) (\i0 -> lessThanByteString i1 i3))))) (unBData (i12 (i14 i1))))))) i1 (\i0 -> False))) (force trace)) "unsorted map") (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i16 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i19 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i19 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i19 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
assertSorted.fails on malsorted symbols (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i7 ((\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i8 i1))) i1) (\i0 -> force (i4 (force nullList (i7 i1)) (delay ((\i0 -> \i0 -> i5 (\i0 -> i3 (unIData (i9 i1))) i1) (\i0 -> equalsInteger i1 0) i1)))) i1) (delay (force (i8 "Abnormal Value" (delay error)))) (delay (i6 i1)))) ((\i0 -> \i0 -> i12 (\i0 -> \i0 -> force (i15 i1 (delay i3) (delay (i21 (i16 i1) (i2 (i17 i1)))))) i2) (i14 #c7 (i15 i19 1)) (i14 #c0 (i15 i19 1)))) (\i0 -> i10 (\i0 -> \i0 -> force (i13 i1 (delay False) (delay (force (i4 (i3 (i14 i1)) (delay (i2 (i15 i1)))))))))) (\i0 -> i5 i1 i2)) (delay True)) (force (force sndPair))) (\i0 -> i6 (\i0 -> \i0 -> force (i9 i1 (delay (\i0 -> i4)) (delay ((\i0 -> \i0 -> force (i6 (i1 i2) (delay (force (i7 i8 (delay error)))) (delay (i4 (i13 i3) (\i0 -> lessThanByteString i1 i3))))) (unBData (i7 (i10 i1))))))) i1 (\i0 -> False))) (force ifThenElse)) (force trace)) "unsorted map") (force (force fstPair))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
assertSorted.fails on zero quantities (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i13 ((\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i15 i1))) i1) (\i0 -> force (i4 (force nullList (i6 i1)) (delay ((\i0 -> \i0 -> i5 (\i0 -> i3 (unIData (i16 i1))) i1) (\i0 -> equalsInteger i1 0) i1)))) i1) (delay (force (i6 "Abnormal Value" (delay error)))) (delay (i5 i1)))) ((\i0 -> \i0 -> (\i0 -> i10 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i11 (\i0 -> \i0 -> iData (subtractInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i17 i18 (i19 i23 1)) (i17 i18 (i19 i23 1)))) (\i0 -> i9 (\i0 -> \i0 -> force (i16 i1 (delay False) (delay (force (i4 (i3 (i17 i1)) (delay (i2 (i18 i1)))))))))) (\i0 -> i11 i1 i2)) (delay True)) (\i0 -> i6 (\i0 -> \i0 -> force (i13 i1 (delay (\i0 -> i4)) (delay ((\i0 -> \i0 -> force (i13 (i1 i2) (delay (force (i6 i7 (delay error)))) (delay (i4 (i17 i3) (\i0 -> lessThanByteString i1 i3))))) (unBData (i12 (i14 i1))))))) i1 (\i0 -> False))) (force trace)) "unsorted map") (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i17 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i20 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i20 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i20 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i5 (bData i2) (mapData i1))) #c0) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #736f6d65746f6b656e))
assertSorted.fails on empty token map (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i9 ((\i0 -> \i0 -> i4 (\i0 -> i3 (unMapData (i8 i1))) i1) (\i0 -> force (i4 (force nullList (i7 i1)) (delay ((\i0 -> \i0 -> i5 (\i0 -> i3 (unIData (i9 i1))) i1) (\i0 -> equalsInteger i1 0) i1)))) i1) (delay (force (i10 "Abnormal Value" (delay error)))) (delay (i6 i1)))) ((\i0 -> \i0 -> (\i0 -> \i0 -> force mkCons (mkPairData i2 i1) i18) (bData i2) (mapData i1)) #c0 i14)) (\i0 -> i6 (\i0 -> \i0 -> force (i9 i1 (delay False) (delay (force (i4 (i3 (i15 i1)) (delay (i2 (i13 i1)))))))))) (\i0 -> i7 i1 i2)) (delay True)) (force (force sndPair))) (\i0 -> i2 (\i0 -> \i0 -> force (i5 i1 (delay (\i0 -> i4)) (delay ((\i0 -> \i0 -> force (i8 (i1 i2) (delay (force (i9 i10 (delay error)))) (delay (i4 (i11 i3) (\i0 -> lessThanByteString i1 i3))))) (unBData (i10 (i11 i1))))))) i1 (\i0 -> False))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force (force chooseList))) (force ifThenElse)) (force trace)) "unsorted map") (force tailList)) (force (force fstPair))) (force headList)) [  ]))
Ada.adaSymbol (program 1.0.0 #)
Ada.adaToken (program 1.0.0 #)
Ada.lovelaceValueOf (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> force (force (force chooseList) i1 (delay 0) (delay (force ifThenElse (equalsData (force (force fstPair) (i3 i1)) (bData #)) (unIData (i2 (i3 (unMapData (i2 (i3 i1)))))) 0)))) (force (force sndPair))) (force headList)))
Ada.isAdaOnlyValue.itself (program 1.0.0 (\i0 -> force (force (force chooseList) i1 (delay True) (delay ((\i0 -> \i0 -> force ifThenElse i2 i1 False) (force nullList (force tailList i1)) (equalsData (force (force fstPair) (force headList i1)) (bData #)))))))
Ada.isAdaOnlyValue.true on empty (program 1.0.0 ((\i0 -> force (force (force chooseList) i1 (delay True) (delay ((\i0 -> \i0 -> force ifThenElse i2 i1 False) (force nullList (force tailList i1)) (equalsData (force (force fstPair) (force headList i1)) (bData #)))))) [  ]))
Ada.isAdaOnlyValue.trivially false (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force (force chooseList) i1 (delay True) (delay ((\i0 -> \i0 -> force ifThenElse i2 i1 False) (force nullList (force tailList i1)) (equalsData (force (force fstPair) (force headList i1)) (bData #)))))) ((\i0 -> \i0 -> i3 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i3 (bData i2) (iData i1)) #736f6d65746f6b656e 1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
Ada.isAdaOnlyValue.less trivially false (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i9 i1 (delay True) (delay ((\i0 -> \i0 -> i9 i2 i1 False) (force nullList (i11 i1)) (equalsData (i8 (i10 i1)) (bData i17)))))) ((\i0 -> \i0 -> (\i0 -> i4 (\i0 -> \i0 -> mapData (i3 (unMapData i2) (unMapData i1)))) (\i0 -> \i0 -> i5 (\i0 -> \i0 -> iData (addInteger (unIData i2) (unIData i1))) i2 i1) i2 i1) (i11 #c0 (i12 #736f6d65746f6b656e 1)) (i11 i16 (i12 i16 10000000)))) (\i0 -> \i0 -> \i0 -> i4 i3 (\i0 -> \i0 -> i2) i2 i1)) (\i0 -> i2 (i3 i1))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (\i0 -> \i0 -> \i0 -> force (i10 i1 (delay (i16 i3 i2)) (delay ((\i0 -> (\i0 -> (\i0 -> force (i11 (equalsData i2 i1) (delay (i19 (mkPairData i2 (i9 (i10 i6) (i10 i3))) (i8 (\i0 -> \i0 -> i2) i5 (i15 i4)))) (delay (force (i11 (lessThanByteString (unBData i2) (unBData i1)) (delay (i19 i6 (i8 (\i0 -> \i0 -> i1) i3 (i15 i4) i5))) (delay (i19 i3 (i8 (\i0 -> \i0 -> i1) i6 i5 (i15 i4))))))))) (i11 i2)) (i10 i4)) (i11 i1)))))) (\i0 -> \i0 -> force (i8 i2 (delay i1) (delay (i3 (\i0 -> \i0 -> i1) (i9 i2) (i10 i2) i1)))))) (force (force sndPair))) (force ifThenElse)) (force (force fstPair))) (force (force chooseList))) (force headList)) (force tailList)) (\i0 -> \i0 -> i4 (bData i2) (mapData i1))) (\i0 -> \i0 -> i3 (bData i2) (iData i1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #))
Ada.adaOnlyValue.itself (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (i2 i1)) (bData #)) ((\i0 -> force mkCons i1 i4) (i2 i1)) i3)))) (force headList)) [  ]))
Ada.adaOnlyValue.on empty (program 1.0.0 ((\i0 -> (\i0 -> force (force (force chooseList) i2 (delay i2) (delay (force ifThenElse (equalsData (force (force fstPair) (i1 i2)) (bData #)) ((\i0 -> force mkCons i1 i3) (i1 i2)) i2)))) (force headList)) [  ]))
Ada.adaOnlyValue.on non-Ada (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (i2 i1)) (bData #)) ((\i0 -> i5 i1 i6) (i2 i1)) i5)))) ((\i0 -> \i0 -> i4 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i4 (bData i2) (iData i1)) #736f6d65746f6b656e 1))) (force headList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
Ada.adaOnlyValue.on Ada (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (i2 i1)) (bData i6)) ((\i0 -> i5 i1 i6) (i2 i1)) i5)))) ((\i0 -> i3 (bData i6) (mapData i1)) ((\i0 -> i3 (bData i6) (iData i1)) 10000000))) (force headList)) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #))
Ada.noAdaValue.itself (program 1.0.0 (\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) (bData #)) (force tailList i1) i1)))))
Ada.noAdaValue.on empty (program 1.0.0 ((\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) (bData #)) (force tailList i1) i1)))) [  ]))
Ada.noAdaValue.on non-Ada (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) (bData #)) (force tailList i1) i1)))) ((\i0 -> \i0 -> i3 (bData i2) (mapData i1)) #c0 ((\i0 -> \i0 -> i3 (bData i2) (iData i1)) #736f6d65746f6b656e 1))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]))
Ada.noAdaValue.on Ada (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (force (force chooseList) i1 (delay i1) (delay (force ifThenElse (equalsData (force (force fstPair) (force headList i1)) (bData i5)) (force tailList i1) i1)))) ((\i0 -> i2 (bData i5) (mapData i1)) ((\i0 -> i2 (bData i5) (iData i1)) 10000000))) (\i0 -> \i0 -> i3 (mkPairData i2 i1) i4)) (force mkCons)) [  ]) #))