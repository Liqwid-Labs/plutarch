literal (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 2) 1))
ops.+ (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i8 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (addInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
ops.- (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i8 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
ops.* (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i9 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (multiplyInteger i4 i2))))) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2) (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i8 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3))))))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
ops.harmonic-sum (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (i1 (i1 (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)) (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3))) (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4))) (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i8 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (addInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3))))))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
ops.multi-product (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (i1 (i2 (i1 (i2 (i1 (i2 (i1 (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5)) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 6)) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i8 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (multiplyInteger i4 i2)))))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
compare (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> lessThanInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 9)) (i1 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 10))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
round.5/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i8 (equalsInteger (modInteger i3 2) 1) (delay (force (i8 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i8 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i8 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
round.4/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i8 (equalsInteger (modInteger i3 2) 1) (delay (force (i8 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i8 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i8 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
round.-5/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i8 (equalsInteger (modInteger i3 2) 1) (delay (force (i8 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i8 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i8 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i5 i2))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
round.-1/4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> addInteger i2 (force (i8 (equalsInteger (modInteger i3 2) 1) (delay (force (i8 (lessThanInteger (divideInteger i3 2) i1) (delay 1) (delay 0)))) (delay (force (i8 (equalsInteger (divideInteger i3 2) i1) (delay (modInteger i2 2)) (delay (force (i8 (lessThanInteger i1 (divideInteger i3 2)) (delay 0) (delay 1)))))))))) (modInteger i3 i2)) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i5 i2))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4)))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
truncate.5/4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i7 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i7 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 5) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
truncate.7/4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i7 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i7 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 7) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
truncate.1/4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i7 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i7 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
truncate.-7/4 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> force (i7 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i7 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1))) ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i5 i2))) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 7) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4)))) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
properFraction.-1/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) ((\i0 -> i3 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i10 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) ((\i0 -> \i0 -> i1 i3 i2) 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i16 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i16 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i16 i2 i1 (delay False)) (equalsInteger i2 0) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)))))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i12 i2)))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
properFraction.-3/2 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) ((\i0 -> i3 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i10 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) ((\i0 -> \i0 -> i1 i3 i2) 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i16 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i16 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i16 i2 i1 (delay False)) (equalsInteger i2 (i12 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2)))))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i12 i2)))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
properFraction.-4/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) ((\i0 -> i3 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i10 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) ((\i0 -> \i0 -> i1 i3 i2) 1))) (i1 (\i0 -> \i0 -> (\i0 -> force (i16 (lessThanEqualsInteger 0 i3) (delay i1) (delay (addInteger i1 (force (i16 (equalsInteger (modInteger i3 i2) 0) (delay 0) (delay 1))))))) (divideInteger i2 i1)))) (i1 (i2 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 4) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3))) (\i0 -> \i0 -> force ((\i0 -> \i0 -> i16 i2 i1 (delay False)) (equalsInteger i2 (i12 1)) (delay ((\i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> equalsInteger (multiplyInteger i1 i4) (multiplyInteger i2 i3)))) (i3 (i4 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3)))))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i2 i3) (i12 i2)))) (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) (i15 (multiplyInteger i3 i2)))))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i13 (equalsInteger i2 0) (delay 0) (delay (force (i13 (lessThanEqualsInteger i2 0) (delay (i11 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i10 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i7 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i6 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i4 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (\i0 -> force (i2 (lessThanEqualsInteger i1 0) (delay (force (i3 i4 (delay error)))) (delay i1)))) (force ifThenElse)) (force trace)) "ptryPositive: building with non positive"))
data.id.0.5 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 2) 1))
data.id.2 (program 1.0.0 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 2))
data.id.11/3 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 11) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 3)) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
div by 0.1/0 (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i14 (equalsInteger i2 0) (delay 0) (delay (force (i14 (lessThanEqualsInteger i2 0) (delay (i13 1)) (delay 1))))))) ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (i18 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2))) (force (i15 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (i12 i2)) (i11 i2)))) ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i10 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 0)) (\i0 -> force (i3 (lessThanEqualsInteger i1 (i2 1)) (delay (i2 i1)) (delay i1)))) (\i0 -> subtractInteger 0 i1)) (force ifThenElse)))
div by 0.recip 0 (program 1.0.0 ((\i0 -> i1 (\i0 -> \i0 -> (\i0 -> \i0 -> i1 i3 i2) (force (force ifThenElse (lessThanEqualsInteger i2 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 0)))
div by 0.1/(1-1) (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> (\i0 -> i8 ((\i0 -> \i0 -> i1 i2 i3) (multiplyInteger i5 i2))) ((\i0 -> force (i15 (lessThanEqualsInteger i1 0) (delay (force (force trace "ptryPositive: building with non positive" (delay error)))) (delay i1))) (multiplyInteger i3 i2))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> i7 ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i4 i2)) (subtractInteger (multiplyInteger i4 i1) (multiplyInteger i2 i3)))))) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1) ((\i0 -> (\i0 -> \i0 -> i1 i3 i2) 1) 1))) (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> \i0 -> i1 i3 i2) (multiplyInteger i2 (divideInteger i4 i3))) (multiplyInteger i1 (divideInteger i4 i2))) (force (i11 (equalsInteger i2 0) (delay 0) (delay (force (i11 (lessThanEqualsInteger i2 0) (delay (i12 1)) (delay 1))))))) (i4 i2 i1)))) (\i0 -> \i0 -> (\i0 -> (\i0 -> i5 (i7 i2 i1) (i8 i2 i1)) (i8 i2)) (i7 i2))) (i1 (\i0 -> \i0 -> \i0 -> force (i8 (equalsInteger i1 0) (delay i2) (delay (i3 i1 (modInteger i2 i1))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> force (i5 (lessThanEqualsInteger i2 i1) (delay i1) (delay i2)))) (\i0 -> \i0 -> force (i4 (lessThanEqualsInteger i2 i1) (delay i2) (delay i1)))) (\i0 -> force (i2 (lessThanEqualsInteger i1 (i3 1)) (delay (i3 i1)) (delay i1)))) (force ifThenElse)) (\i0 -> subtractInteger 0 i1)))