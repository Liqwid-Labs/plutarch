reverse.reverse_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> i3 i1 i2) (\i0 -> \i0 -> force i1) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (lessThanEqualsInteger i4 i2) (delay (i6 i3)))) (delay True)) (delay True)) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (i1 6 (i1 7 (i1 8 (i1 9 (i1 10 (\i0 -> \i0 -> force i1)))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.reverse_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 i1 False True) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i9 i2 i1 (delay False)) (lessThanEqualsInteger i4 i2) (delay (i6 i3)))) (delay True)) (delay True)) (i2 10 (i2 9 (i2 8 (i2 7 (i2 6 (i2 5 (i2 4 (i2 3 (i2 2 (i2 1 (\i0 -> \i0 -> force i1))))))))))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
isSorted.reverse_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i3 i4) (\i0 -> \i0 -> force i1) (\i0 -> \i0 -> force i1)))
sort.sort_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i6 (\i0 -> \i0 -> \i0 -> force (i6 (i5 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i6 (i5 (i8 i1)) (delay (i7 i1)) (delay (i3 i2 (i9 (\i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i10 (i9 i1) (delay i2) (delay (i14 (i13 (\i0 -> \i0 -> \i0 -> \i0 -> force (i14 (i13 i2) (delay i1) (delay (force (i14 (i13 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i18 (i7 i4 i2) (delay (i22 i4 (i8 i7 i3 i5))) (delay (i22 i2 (i8 i7 i6 i1))))) (i19 i4)) (i17 i3)) (i17 i3)) (i15 i2)))))))) i3 (i11 i2) (i11 i1)) (i4 i3 (i12 i1)))))) (i11 i1))))) i2 i1)))))))) lessThanInteger ((\i0 -> i7 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i8 i1 (\i0 -> \i0 -> force i1)) i1)) (i6 1 (i6 2 (i6 3 (i6 4 (i6 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
sort.sort_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i6 (\i0 -> \i0 -> \i0 -> force (i6 (i5 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i6 (i5 (i8 i1)) (delay (i7 i1)) (delay (i3 i2 (i9 (\i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i10 (i9 i1) (delay i2) (delay (i14 (i13 (\i0 -> \i0 -> \i0 -> \i0 -> force (i14 (i13 i2) (delay i1) (delay (force (i14 (i13 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i18 (i7 i4 i2) (delay (i22 i4 (i8 i7 i3 i5))) (delay (i22 i2 (i8 i7 i6 i1))))) (i19 i4)) (i17 i3)) (i17 i3)) (i15 i2)))))))) i3 (i11 i2) (i11 i1)) (i4 i3 (i12 i1)))))) (i11 i1))))) i2 i1)))))))) lessThanInteger ((\i0 -> i7 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i8 i1 (\i0 -> \i0 -> force i1)) i1)) (\i0 -> \i0 -> force i1)) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mergeBy.mergeBy_[1..5]_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> \i0 -> force (i6 (i5 i2) (delay i1) (delay (force (i6 (i5 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i10 (i7 i4 i2) (delay (i13 i4 (i8 i7 i3 i5))) (delay (i13 i2 (i8 i7 i6 i1))))) (i10 i4)) (i10 i3)) (i8 i3)) (i8 i2)))))))) lessThanInteger (i5 1 (i5 2 (i5 3 (i5 4 (i5 5 (\i0 -> \i0 -> force i1)))))) (i5 1 (i5 2 (i5 3 (i5 4 (i5 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mergeBy.mergeBy_[]_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> \i0 -> force (i6 (i5 i2) (delay i1) (delay (force (i6 (i5 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i10 (i7 i4 i2) (delay (i11 i4 (i8 i7 i3 i5))) (delay (i11 i2 (i8 i7 i6 i1))))) (i11 i4)) (i11 i3)) (i9 i3)) (i9 i2)))))))) lessThanInteger (\i0 -> \i0 -> force i1) (\i0 -> \i0 -> force i1)) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))))
nubSort.nubSort_[1, 1, 2, 2, 3, 4, 5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> i5 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i10 i2 i1 (delay False)) (lessThanEqualsInteger i4 i2) (delay (i6 i3)))) (delay True)) (delay True)) ((\i0 -> force (i3 (i2 i1) (delay i1) (delay ((\i0 -> i7 (\i0 -> \i0 -> \i0 -> \i0 -> force (i8 (i7 i1) (delay (i12 i2)) (delay ((\i0 -> (\i0 -> force (i10 (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i15 i4 (i6 i5 i2 i1))))) (i11 i2)) (i9 i1))))) equalsInteger (i5 i1) (i6 i1)) (i6 (\i0 -> \i0 -> \i0 -> force (i6 (i5 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i6 (i5 (i8 i1)) (delay (i7 i1)) (delay (i3 i2 (i9 (\i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i10 (i9 i1) (delay i2) (delay (i15 (i13 (\i0 -> \i0 -> \i0 -> \i0 -> force (i14 (i13 i2) (delay i1) (delay (force (i14 (i13 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i18 (i7 i4 i2) (delay (i23 i4 (i8 i7 i3 i5))) (delay (i23 i2 (i8 i7 i6 i1))))) (i19 i4)) (i17 i3)) (i17 i3)) (i15 i2)))))))) i3 (i11 i2) (i11 i1)) (i4 i3 (i12 i1)))))) (i11 i1))))) i2 i1)))))))) lessThanInteger (i6 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i11 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) i1)))))) (i7 1 (i7 1 (i7 2 (i7 2 (i7 3 (i7 4 (i7 5 (\i0 -> \i0 -> force i1)))))))))) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> i2 i1 (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
nubSort.nubSort_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i3 (i2 i1) (delay i1) (delay ((\i0 -> i7 (\i0 -> \i0 -> \i0 -> \i0 -> force (i8 (i7 i1) (delay (i12 i2)) (delay ((\i0 -> (\i0 -> force (i10 (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i15 i4 (i6 i5 i2 i1))))) (i11 i2)) (i9 i1))))) equalsInteger (i5 i1) (i6 i1)) (i6 (\i0 -> \i0 -> \i0 -> force (i6 (i5 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i6 (i5 (i8 i1)) (delay (i7 i1)) (delay (i3 i2 (i9 (\i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i10 (i9 i1) (delay i2) (delay (i15 (i13 (\i0 -> \i0 -> \i0 -> \i0 -> force (i14 (i13 i2) (delay i1) (delay (force (i14 (i13 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i18 (i7 i4 i2) (delay (i23 i4 (i8 i7 i3 i5))) (delay (i23 i2 (i8 i7 i6 i1))))) (i19 i4)) (i17 i3)) (i17 i3)) (i15 i2)))))))) i3 (i11 i2) (i11 i1)) (i4 i3 (i12 i1)))))) (i11 i1))))) i2 i1)))))))) lessThanInteger (i6 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i12 (i11 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) i1)))))) (\i0 -> \i0 -> force i1)) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> i2 i1 (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pisUniq.isUniq_1_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> equalsInteger (i2 i1) (i2 (force (i4 (i3 i1) (delay i1) (delay ((\i0 -> i8 (\i0 -> \i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (i13 i2)) (delay ((\i0 -> (\i0 -> force (i11 (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i16 i4 (i6 i5 i2 i1))))) (i12 i2)) (i10 i1))))) equalsInteger (i6 i1) (i7 i1)) (i7 (\i0 -> \i0 -> \i0 -> force (i7 (i6 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i7 (i6 (i9 i1)) (delay (i8 i1)) (delay (i3 i2 (i10 (\i0 -> \i0 -> \i0 -> force (i10 (i9 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i11 (i10 i1) (delay i2) (delay (i16 (i14 (\i0 -> \i0 -> \i0 -> \i0 -> force (i15 (i14 i2) (delay i1) (delay (force (i15 (i14 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i19 (i7 i4 i2) (delay (i24 i4 (i8 i7 i3 i5))) (delay (i24 i2 (i8 i7 i6 i1))))) (i20 i4)) (i18 i3)) (i18 i3)) (i16 i2)))))))) i3 (i12 i2) (i12 i1)) (i4 i3 (i13 i1)))))) (i12 i1))))) i2 i1)))))))) lessThanInteger (i7 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i13 (i12 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) i1)))))))) (i8 1 (i8 2 (i8 3 (i8 4 (i8 5 (\i0 -> \i0 -> force i1))))))) (i5 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0)) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> i2 i1 (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pisUniq.isUniq_1_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> (\i0 -> equalsInteger (i2 i1) (i2 (force (i4 (i3 i1) (delay i1) (delay ((\i0 -> i8 (\i0 -> \i0 -> \i0 -> \i0 -> force (i9 (i8 i1) (delay (i13 i2)) (delay ((\i0 -> (\i0 -> force (i11 (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i16 i4 (i6 i5 i2 i1))))) (i12 i2)) (i10 i1))))) equalsInteger (i6 i1) (i7 i1)) (i7 (\i0 -> \i0 -> \i0 -> force (i7 (i6 i1) (delay (\i0 -> \i0 -> force i1)) (delay (force (i7 (i6 (i9 i1)) (delay (i8 i1)) (delay (i3 i2 (i10 (\i0 -> \i0 -> \i0 -> force (i10 (i9 i1) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> force (i11 (i10 i1) (delay i2) (delay (i16 (i14 (\i0 -> \i0 -> \i0 -> \i0 -> force (i15 (i14 i2) (delay i1) (delay (force (i15 (i14 i1) (delay i2) (delay ((\i0 -> (\i0 -> (\i0 -> (\i0 -> force (i19 (i7 i4 i2) (delay (i24 i4 (i8 i7 i3 i5))) (delay (i24 i2 (i8 i7 i6 i1))))) (i20 i4)) (i18 i3)) (i18 i3)) (i16 i2)))))))) i3 (i12 i2) (i12 i1)) (i4 i3 (i13 i1)))))) (i12 i1))))) i2 i1)))))))) lessThanInteger (i7 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i13 (i12 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1))) i1)))))))) (\i0 -> \i0 -> force i1)) (i5 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0)) (\i0 -> i1 (\i0 -> \i0 -> False) (delay True))) (force ifThenElse)) (\i0 -> i1 (\i0 -> \i0 -> i2) (delay error))) (\i0 -> i1 (\i0 -> \i0 -> i1) (delay error))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> i2 i1 (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmapMaybe.mapMaybe_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (i1 (\i0 -> \i0 -> False) (delay True)) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> (\i0 -> i4 i2 (\i0 -> i7 i1 (i6 i5 i2)) (delay (i5 i4 i1))) (i2 (\i0 -> \i0 -> i1) (delay error))) (i1 (\i0 -> \i0 -> i2) (delay error)))))) (\i0 -> \i0 -> \i0 -> i2 i3) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmapMaybe.mapMaybe_[] (program 1.0.0 ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> force (force ifThenElse (i1 (\i0 -> \i0 -> False) (delay True)) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> (\i0 -> i4 i2 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i4 i3) (i6 i5 i2)) (delay (i5 i4 i1))) (i2 (\i0 -> \i0 -> i1) (delay error))) (i1 (\i0 -> \i0 -> i2) (delay error)))))) (\i0 -> \i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> force i1)))
pmapMaybe.mapMaybe_[1..5]_Nothing (program 1.0.0 ((\i0 -> (\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (i1 (\i0 -> \i0 -> False) (delay True)) (delay (\i0 -> \i0 -> force i1)) (delay ((\i0 -> (\i0 -> i4 i2 (\i0 -> i8 i1 (i6 i5 i2)) (delay (i5 i4 i1))) (i2 (\i0 -> \i0 -> i1) (delay error))) (i1 (\i0 -> \i0 -> i2) (delay error)))))) (\i0 -> \i0 -> \i0 -> force i1) (i2 1 (i2 2 (i2 3 (i2 4 (i2 5 (\i0 -> \i0 -> force i1))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
preplicate.preplicate_5_0 (program 1.0.0 ((\i0 -> equalsInteger 5 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 5 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
preplicate.preplicate_0_0 (program 1.0.0 ((\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 0 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))