reverse.reverse_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> i3 i1 i2) (\i0 -> \i0 -> force i1) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
reverse.reverse_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 i1 False True) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i10 i2 i1 (delay False)) (i6 i4 i2) (delay (i7 i6 i3)))) (delay True)) (delay True)) lessThanEqualsInteger (i2 10 (i2 9 (i2 8 (i2 7 (i2 6 (i2 5 (i2 4 (i2 3 (i2 2 (i2 1 (\i0 -> \i0 -> force i1))))))))))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
reverse.reverse_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (i6 i4 i2) i1) (delay i2))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i3 i4) (\i0 -> \i0 -> force i1) (\i0 -> \i0 -> force i1)))
checkSorted.checkSorted_[1..10] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> force ifThenElse i2 i1 (delay False)) (i6 i4 i2) (delay (i7 i6 i3)))) (delay True)) (delay True)) lessThanEqualsInteger (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (i1 6 (i1 7 (i1 8 (i1 9 (i1 10 (\i0 -> \i0 -> force i1)))))))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
checkSorted.checkSorted_[10..1] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 i1 False True) ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i10 i2 i1 (delay False)) (i6 i4 i2) (delay (i7 i6 i3)))) (delay True)) (delay True)) lessThanEqualsInteger (i2 10 (i2 9 (i2 8 (i2 7 (i2 6 (i2 5 (i2 4 (i2 3 (i2 2 (i2 1 (\i0 -> \i0 -> force i1))))))))))))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
sort.sort_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i7 (i1 (\i0 -> \i0 -> False) (delay True)) (delay i2) (delay (i5 i4 (i8 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i16 (i15 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (i22 (i7 i4 i2) (delay (i24 i4 (i8 i7 i3 i5))) (delay (i24 i2 (i8 i7 i6 i1))))) (delay i4)) (delay i1)) i6 i4 i2) (i7 i6 i1)) (delay i3)) (delay (\i0 -> \i0 -> force i1))) i4 i3))))) (delay (\i0 -> \i0 -> force i1))) lessThanInteger ((\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i9 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i5 i1 (\i0 -> \i0 -> force i1)) i1)) (i3 1 (i3 2 (i3 3 (i3 4 (i3 5 (\i0 -> \i0 -> force i1))))))) (force ifThenElse)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
sort.sort_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> i3 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i7 (i1 (\i0 -> \i0 -> False) (delay True)) (delay i2) (delay (i5 i4 (i8 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i16 (i15 (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (i22 (i7 i4 i2) (delay (i24 i4 (i8 i7 i3 i5))) (delay (i24 i2 (i8 i7 i6 i1))))) (delay i4)) (delay i1)) i6 i4 i2) (i7 i6 i1)) (delay i3)) (delay (\i0 -> \i0 -> force i1))) i4 i3))))) (delay (\i0 -> \i0 -> force i1))) lessThanInteger ((\i0 -> i4 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> i9 (i5 i2) (i4 i1)) (delay (\i0 -> \i0 -> force i1)))) (\i0 -> i5 i1 (\i0 -> \i0 -> force i1)) i1)) (\i0 -> \i0 -> force i1)) (force ifThenElse)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mergeBy.mergeBy_[1..5]_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (force ifThenElse (i7 i4 i2) (delay (i9 i4 (i8 i7 i3 i5))) (delay (i9 i2 (i8 i7 i6 i1))))) (delay i4)) (delay i1)) lessThanInteger (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1)))))) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
mergeBy.mergeBy_[]_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 (\i0 -> \i0 -> i3 (\i0 -> \i0 -> force (force ifThenElse (i7 i4 i2) (delay (i9 i4 (i8 i7 i3 i5))) (delay (i9 i2 (i8 i7 i6 i1))))) (delay i4)) (delay i1)) lessThanInteger (\i0 -> \i0 -> force i1) (\i0 -> \i0 -> force i1)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
nub.nub_[1, 1, 2, 2, 3, 4, 5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i1 (\i0 -> \i0 -> force ((\i0 -> \i0 -> i11 i2 i1 (delay False)) (i6 i4 i2) (delay (i7 i6 i3)))) (delay True)) (delay True)) lessThanEqualsInteger ((\i0 -> i1 (\i0 -> \i0 -> i4 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (i11 (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i12 i4 (i6 i5 i2 i1))))) (delay (i10 i2 (\i0 -> \i0 -> force i1)))) equalsInteger i2 i1) (delay i1)) (i3 1 (i3 1 (i3 2 (i3 2 (i3 3 (i3 4 (i3 5 (\i0 -> \i0 -> force i1)))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (force ifThenElse)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
nub.nub_[] (program 1.0.0 ((\i0 -> (\i0 -> i1 (\i0 -> \i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i10 i4 (i6 i5 i2 i1))))) (delay (i8 i2 (\i0 -> \i0 -> force i1)))) equalsInteger i2 i1) (delay i1)) (\i0 -> \i0 -> force i1)) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pisUniq.isUniq_1_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> equalsInteger (i2 i1) (i2 (i1 (\i0 -> \i0 -> i5 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i12 i4 (i6 i5 i2 i1))))) (delay (i10 i2 (\i0 -> \i0 -> force i1)))) equalsInteger i2 i1) (delay i1)))) (i3 1 (i3 2 (i3 3 (i3 4 (i3 5 (\i0 -> \i0 -> force i1))))))) (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pisUniq.isUniq_1_[] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> (\i0 -> equalsInteger (i2 i1) (i2 (i1 (\i0 -> \i0 -> i5 (\i0 -> \i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> force (force ifThenElse (i5 i2 i4) (delay (i6 i5 i4 i1)) (delay (i12 i4 (i6 i5 i2 i1))))) (delay (i10 i2 (\i0 -> \i0 -> force i1)))) equalsInteger i2 i1) (delay i1)))) (\i0 -> \i0 -> force i1)) (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0)) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmapMaybe.mapMaybe_[1..5] (program 1.0.0 ((\i0 -> (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i4 i2 (\i0 -> i7 i1 (i6 i5 i2)) (delay (i5 i4 i1))) (delay (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> i2 i3) (i1 1 (i1 2 (i1 3 (i1 4 (i1 5 (\i0 -> \i0 -> force i1))))))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
pmapMaybe.mapMaybe_[] (program 1.0.0 ((\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1))) (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i4 i2 (\i0 -> (\i0 -> \i0 -> \i0 -> i2 i4 i3) (i6 i5 i2)) (delay (i5 i4 i1))) (delay (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> i2 i3) (\i0 -> \i0 -> force i1)))
pmapMaybe.mapMaybe_[1..5]_Nothing (program 1.0.0 ((\i0 -> (\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i5 (addInteger i4 1) i1) (delay i2)) 0 (i1 (\i0 -> \i0 -> \i0 -> i1 (\i0 -> \i0 -> i4 i2 (\i0 -> i8 i1 (i6 i5 i2)) (delay (i5 i4 i1))) (delay (\i0 -> \i0 -> force i1))) (\i0 -> \i0 -> \i0 -> force i1) (i2 1 (i2 2 (i2 3 (i2 4 (i2 5 (\i0 -> \i0 -> force i1))))))))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))) (\i0 -> \i0 -> \i0 -> \i0 -> i2 i4 i3)))
preplicate.preplicate_5_0 (program 1.0.0 ((\i0 -> equalsInteger 5 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 5 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))
preplicate.preplicate_0_0 (program 1.0.0 ((\i0 -> equalsInteger 0 (i1 (\i0 -> \i0 -> \i0 -> force (force (force chooseList) i1 (delay i2) (delay (i3 (addInteger i2 1) (force tailList i1))))) 0 (i1 (\i0 -> \i0 -> \i0 -> force (force ifThenElse (lessThanEqualsInteger i2 0) (delay []) (delay (force mkCons i1 (i3 (subtractInteger i2 1) i1))))) 0 0))) (\i0 -> (\i0 -> i2 (\i0 -> i2 i2 i1)) (\i0 -> i2 (\i0 -> i2 i2 i1)))))